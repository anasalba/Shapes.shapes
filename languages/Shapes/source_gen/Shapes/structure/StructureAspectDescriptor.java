package Shapes.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCanvas = createDescriptorForCanvas();
  /*package*/ final ConceptDescriptor myConceptCircle = createDescriptorForCircle();
  /*package*/ final ConceptDescriptor myConceptColor = createDescriptorForColor();
  /*package*/ final ConceptDescriptor myConceptColorReference = createDescriptorForColorReference();
  /*package*/ final ConceptDescriptor myConceptShape = createDescriptorForShape();
  /*package*/ final ConceptDescriptor myConceptSquare = createDescriptorForSquare();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCanvas, myConceptCircle, myConceptColor, myConceptColorReference, myConceptShape, myConceptSquare);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Canvas:
        return myConceptCanvas;
      case LanguageConceptSwitch.Circle:
        return myConceptCircle;
      case LanguageConceptSwitch.Color:
        return myConceptColor;
      case LanguageConceptSwitch.ColorReference:
        return myConceptColorReference;
      case LanguageConceptSwitch.Shape:
        return myConceptShape;
      case LanguageConceptSwitch.Square:
        return myConceptSquare;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForCanvas() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Canvas", 0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb95a41bL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:cccbfb20-03c2-4e5c-9c69-c8ba7eda9862(Shapes.structure)/7380875995644273691");
    b.version(2);
    b.aggregate("shapes", 0x666e239ccb95a41cL).target(0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb954e39L).optional(true).ordered(true).multiple(true).origin("7380875995644273692").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCircle() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Circle", 0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb95a40dL);
    b.class_(false, false, false);
    b.super_("Shapes.structure.Shape", 0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb954e39L);
    b.origin("r:cccbfb20-03c2-4e5c-9c69-c8ba7eda9862(Shapes.structure)/7380875995644273677");
    b.version(2);
    b.prop("x", 0x666e239ccb95a40eL, "7380875995644273678");
    b.prop("y", 0x666e239ccb95a40fL, "7380875995644273679");
    b.prop("radius", 0x666e239ccb95a410L, "7380875995644273680");
    b.alias("circle");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForColor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Color", 0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb975e9bL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:cccbfb20-03c2-4e5c-9c69-c8ba7eda9862(Shapes.structure)/7380875995644386971");
    b.version(2);
    b.alias("color");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForColorReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "ColorReference", 0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb98352eL);
    b.class_(false, false, false);
    b.origin("r:cccbfb20-03c2-4e5c-9c69-c8ba7eda9862(Shapes.structure)/7380875995644441902");
    b.version(2);
    b.associate("target", 0x666e239ccb98352fL).target(0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb975e9bL).optional(false).origin("7380875995644441903").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForShape() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Shape", 0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb954e39L);
    b.class_(false, true, false);
    b.origin("r:cccbfb20-03c2-4e5c-9c69-c8ba7eda9862(Shapes.structure)/7380875995644251705");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSquare() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Square", 0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb95a411L);
    b.class_(false, false, false);
    b.super_("Shapes.structure.Shape", 0x217c4745eb994825L, 0x985846b512222960L, 0x666e239ccb954e39L);
    b.origin("r:cccbfb20-03c2-4e5c-9c69-c8ba7eda9862(Shapes.structure)/7380875995644273681");
    b.version(2);
    b.prop("upperLeftX", 0x666e239ccb95a412L, "7380875995644273682");
    b.prop("upperLeftY", 0x666e239ccb95a414L, "7380875995644273684");
    b.prop("size", 0x666e239ccb95a417L, "7380875995644273687");
    return b.create();
  }
}
